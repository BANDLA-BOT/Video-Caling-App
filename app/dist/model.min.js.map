{"version":3,"sources":["model.js"],"names":["redisClient","require","exports","value","Promise","resolve","reject","saveCallId","key","JSON","stringify","err","res","getCallId","GET","parse"],"mappings":"aAAA,IAAMA,YAAcC,QAAQ,kBAA5BC,QAAMF,WAAcC,SAAAA,EAAQE,GAG1B,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAD/BJ,YAAQK,IAARC,EAAqBC,KAAAC,UAAMP,GAAU,KAAA,MAAA,SAAAQ,EAAAC,GAC5BD,GACLX,EAAWW,GAEPL,EAAMM,QAIXV,QAPDW,UAAA,SAAAL,GADF,OAAA,IAAAJ,QAAA,SAAAC,EAAAC,GAaIN,YAAYc,IAAIN,EAAK,SAACG,EAAKC,GAFvBC,GACNP,EAAWF,GAEPC,EAAAI,KAASM,MAAAH","file":"model.min.js","sourcesContent":["const redisClient = require(\"./config/redis\");\r\n\r\nexports.saveCallId = (key, value) => {\r\n  return new Promise((resolve, reject) => {\r\n    redisClient.SET(key, JSON.stringify(value), \"EX\", 86400, (err, res) => {\r\n      if (err) {\r\n        reject(err);\r\n      }\r\n      resolve(res);\r\n    });\r\n  });\r\n};\r\n\r\nexports.getCallId = (key) => {\r\n  return new Promise((resolve, reject) => {\r\n    redisClient.GET(key, (err, res) => {\r\n      if (err) {\r\n        reject(err);\r\n      }\r\n      resolve(JSON.parse(res));\r\n    });\r\n  });\r\n};"]}